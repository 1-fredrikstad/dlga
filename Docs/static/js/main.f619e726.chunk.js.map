{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","fullList","songs","title","mel","song","App","react_default","a","createElement","className","SwipeableTemporaryDrawer","side","classes","_React$useState","React","useState","left","_React$useState2","Object","slicedToArray","state","setState","_React$useState3","_React$useState4","songIndex","setSongIndex","toggleDrawer","open","event","type","key","objectSpread","defineProperty","setSong","index","content","console","log","Button","onClick","SwipeableDrawer","onClose","onOpen","role","onKeyDown","List","map","ListItem","button","ListItemText","primary","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f619e726.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport Button from \"@material-ui/core/Button\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250\n  },\n  fullList: {\n    width: \"auto\"\n  }\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SwipeableTemporaryDrawer />\n    </div>\n  );\n}\n\nconst songs = [\n  {\n    title: \"1. Speiderbønn\",\n    mel: \"melody\",\n    song: `\n    Kjære far i høye himmel,\n    hør mitt hjertes stille bønn:\n    hvor jeg er i verdens vrimmel\n    \n    `\n  }\n];\n\nexport default App;\n\nfunction SwipeableTemporaryDrawer() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    left: false\n  });\n\n  const [songIndex, setSongIndex] = React.useState(null);\n\n  const toggleDrawer = (side, open) => event => {\n    if (\n      event &&\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setState({ ...state, [side]: open });\n  };\n\n  const setSong = index => () => {\n    setSongIndex(index);\n  };\n  // https://material-ui.com/components/drawers/\n  const sideList = side => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(side, false)}\n      onKeyDown={toggleDrawer(side, false)}\n    >\n      <List>\n        {songs.map((song, index) => (\n          <ListItem button key={index} onClick={setSong(index)}>\n            <ListItemText primary={song.title} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  const content =\n    songIndex == null ? (\n      \"Ingen sang valgt\"\n    ) : (\n      <div>\n        <h1>{songs[songIndex].title}</h1>\n        <h2>{songs[songIndex].mel}</h2>\n        <pre>{songs[songIndex].song}</pre>\n      </div>\n    );\n  console.log(\"state:\", songIndex);\n\n  return (\n    <div>\n      <Button onClick={toggleDrawer(\"left\", true)}>Open Left</Button>\n\n      <SwipeableDrawer\n        open={state.left}\n        onClose={toggleDrawer(\"left\", false)}\n        onOpen={toggleDrawer(\"left\", true)}\n      >\n        {sideList(\"left\")}\n      </SwipeableDrawer>\n      {content}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}